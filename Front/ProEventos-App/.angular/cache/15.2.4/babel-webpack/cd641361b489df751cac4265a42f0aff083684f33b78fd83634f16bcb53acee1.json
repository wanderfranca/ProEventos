{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EventoListaComponent = class EventoListaComponent {\n  // CARREGA TUDO AO INICIAR O APP\n  ngOnInit() {\n    this.spinner.show();\n    this.getEventos();\n  }\n  // Função que altera o status da imagem (exibir / ocultar)\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  get filtroLista() {\n    return this.filtroListado;\n  }\n  set filtroLista(value) {\n    this.filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n  filtrarEventos(filtrarPor) {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1);\n  }\n  constructor(eventoService, modalService, toastr, spinner) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.eventos = [];\n    this.eventosFiltrados = [];\n    this.larguraImagem = 150;\n    this.margemImagem = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  getEventos() {\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos;\n        this.eventosFiltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao carregar os eventos', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-sm'\n    });\n  }\n  confirm() {\n    this.modalRef?.hide();\n    this.toastr.success('O evento foi deletado com sucesso!', 'Deletado!');\n  }\n  decline() {\n    this.modalRef?.hide();\n  }\n};\nEventoListaComponent = __decorate([Component({\n  selector: 'app-evento-lista',\n  templateUrl: './evento-lista.component.html',\n  styleUrls: ['./evento-lista.component.scss']\n})], EventoListaComponent);\nexport { EventoListaComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA6B,eAAe;AAYvD,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAG/B;EACOC,QAAQ;IACb,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE;IACnB,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;EACOC,aAAa;IAElB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EASA,IAAWC,WAAW;IACpB,OAAO,IAAI,CAACC,aAAa;EAC3B;EAEA,IAAWD,WAAW,CAACE,KAAa;IAClC,IAAI,CAACD,aAAa,GAAGC,KAAK;IAC1B,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACH,WAAW,GAAG,IAAI,CAACI,cAAc,CAAC,IAAI,CAACJ,WAAW,CAAC,GAAG,IAAI,CAACK,OAAO;EAEjG;EAEOD,cAAc,CAACE,UAAkB;IACtCA,UAAU,GAAGA,UAAU,CAACC,iBAAiB,EAAE;IAC3C,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CACvBC,MAAY,IAAKA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,IAC3EG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,CAC7D;EACH;EAEAO,YACUC,aAA4B,EAC5BC,YAA4B,EAC5BC,MAAqB,EACrBrB,OAA0B;IAH1B,kBAAa,GAAbmB,aAAa;IACb,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,YAAO,GAAPrB,OAAO;IA7BV,YAAO,GAAa,EAAE;IACtB,qBAAgB,GAAa,EAAE;IAC/B,kBAAa,GAAG,GAAG;IACnB,iBAAY,GAAG,CAAC;IAChB,iBAAY,GAAG,IAAI;IAClB,kBAAa,GAAG,EAAE;EA2B1B;EAEOE,UAAU;IACX,IAAI,CAACiB,aAAa,CAACjB,UAAU,EAAE,CAACoB,SAAS,CAAC;MACxCC,IAAI,EAAGb,OAAiB,IAAI;QAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtB,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACE,OAAO;MAC1C,CAAC;MACDc,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAACxB,OAAO,CAACyB,IAAI,EAAE;QACnB,IAAI,CAACJ,MAAM,CAACG,KAAK,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAE3D,CAAC;MACDE,QAAQ,EAAE,MAAM,IAAI,CAAC1B,OAAO,CAACyB,IAAI;KAClC,CAAC;EACJ;EAEOE,SAAS,CAACC,QAA0B;IACzC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACT,YAAY,CAACnB,IAAI,CAAC2B,QAAQ,EAAE;MAACE,KAAK,EAAE;IAAU,CAAC,CAAC;EACvE;EAEAC,OAAO;IACL,IAAI,CAACF,QAAQ,EAAEJ,IAAI,EAAE;IACrB,IAAI,CAACJ,MAAM,CAACW,OAAO,CAAC,oCAAoC,EAAE,WAAW,CAAC;EACxE;EAEAC,OAAO;IACL,IAAI,CAACJ,QAAQ,EAAEJ,IAAI,EAAE;EACvB;CAED;AA7EY3B,oBAAoB,eALhCD,SAAS,CAAC;EACTqC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWtC,oBAAoB,CA6EhC;SA7EYA,oBAAoB","names":["Component","EventoListaComponent","ngOnInit","spinner","show","getEventos","alterarImagem","exibirImagem","filtroLista","filtroListado","value","eventosFiltrados","filtrarEventos","eventos","filtrarPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","constructor","eventoService","modalService","toastr","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirm","success","decline","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["M:\\Projetos\\ProEventos\\front\\proeventos-app\\src\\app\\components\\eventos\\evento-lista\\evento-lista.component.ts"],"sourcesContent":["import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { Evento } from 'src/app/models/Evento';\nimport { EventoService } from 'src/app/services/evento.service';\n\n@Component({\n  selector: 'app-evento-lista',\n  templateUrl: './evento-lista.component.html',\n  styleUrls: ['./evento-lista.component.scss']\n})\nexport class EventoListaComponent implements OnInit {\n\n\n  // CARREGA TUDO AO INICIAR O APP\n  public ngOnInit(): void {\n    this.spinner.show();\n    this.getEventos();\n  }\n\n  // Função que altera o status da imagem (exibir / ocultar)\n  public alterarImagem(): void\n  {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  public modalRef?: BsModalRef;\n  public eventos: Evento[] = [];\n  public eventosFiltrados: Evento[] = [];\n  public larguraImagem = 150;\n  public margemImagem = 2;\n  public exibirImagem = true;\n  private filtroListado = '';\n\n  public get filtroLista(): string {\n    return this.filtroListado;\n  }\n\n  public set filtroLista(value: string){\n    this.filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n\n  }\n\n  public filtrarEventos(filtrarPor: string): Evento[] {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(\n      (evento : any) => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n       evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n    );\n  }\n\n  constructor(\n    private eventoService: EventoService,\n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService\n    ) {\n\n  }\n\n  public getEventos(): void {\n        this.eventoService.getEventos().subscribe({\n          next: (eventos: Evento[]) => {\n            this.eventos = eventos;\n            this.eventosFiltrados = this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao carregar os eventos', 'Erro!');\n\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n\n  public openModal(template: TemplateRef<any>): void {\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n  }\n\n  confirm(): void {\n    this.modalRef?.hide();\n    this.toastr.success('O evento foi deletado com sucesso!', 'Deletado!');\n  }\n\n  decline(): void {\n    this.modalRef?.hide();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}